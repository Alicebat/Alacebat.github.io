<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alactbat的博客</title>
  
  <subtitle>To Be My</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-10T01:23:12.029Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Alace Bat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小程序常用组件运用</title>
    <link href="http://yoursite.com/2020/01/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/01/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6/</id>
    <published>2020-01-10T01:36:14.000Z</published>
    <updated>2020-01-10T01:23:12.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序简介"><a href="#小程序简介" class="headerlink" title="小程序简介"></a>小程序简介</h2><p>小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。</p><p>一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：</p><table><thead><tr><th align="left">文件</th><th align="left">必需</th><th align="right">作用</th></tr></thead><tbody><tr><td align="left">app.js</td><td align="left">是</td><td align="right">小程序逻辑</td></tr><tr><td align="left">app.json</td><td align="left">是</td><td align="right">小程序公共配置</td></tr><tr><td align="left">app.wxss</td><td align="left">否</td><td align="right">小程序公共样式表</td></tr></tbody></table><p>一个小程序页面由四个文件组成，分别是：</p><table><thead><tr><th align="left">文件类型</th><th align="left">必需</th><th align="right">作用</th></tr></thead><tbody><tr><td align="left">js</td><td align="left">是</td><td align="right">页面逻辑</td></tr><tr><td align="left">wxml</td><td align="left">是</td><td align="right">页面结构</td></tr><tr><td align="left">json</td><td align="left">否</td><td align="right">页面配置</td></tr><tr><td align="left">wxss</td><td align="left">否</td><td align="right">页面样式表</td></tr></tbody></table><h2 id="小程序配置"><a href="#小程序配置" class="headerlink" title="小程序配置"></a>小程序配置</h2><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>小程序根目录下的 app.json 文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</p><p>完整配置项说明请参考小程序全局配置 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html</a></p><p>以下是一个包含了部分常用配置选项的 app.json ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  &quot;pages&quot;: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &quot;pages&#x2F;index&#x2F;index&quot;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &quot;pages&#x2F;logs&#x2F;index&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &quot;window&quot;: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &quot;navigationBarTitleText&quot;: &quot;Demo&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &quot;tabBar&quot;: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &quot;list&quot;: [&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      &quot;pagePath&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      &quot;text&quot;: &quot;首页&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;, &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      &quot;pagePath&quot;: &quot;pages&#x2F;logs&#x2F;logs&quot;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      &quot;text&quot;: &quot;日志&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  &quot;networkTimeout&quot;: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &quot;request&quot;: 10000,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &quot;downloadFile&quot;: 10000</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  &quot;debug&quot;: true,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  &quot;navigateToMiniProgramAppIdList&quot;: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &quot;wxe5f52902cf4de896&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h3><p>每一个小程序页面也可以使用同名 .json 文件来对本页面的窗口表现进行配置，页面中配置项会覆盖 app.json 的 window 中相同的配置项。<br>完整配置项说明请参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html</a><br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  &quot;navigationBarBackgroundColor&quot;: &quot;#ffffff&quot;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  &quot;navigationBarTextStyle&quot;: &quot;black&quot;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &quot;navigationBarTitleText&quot;: &quot;微信接口功能演示&quot;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &quot;backgroundColor&quot;: &quot;#eeeeee&quot;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &quot;backgroundTextStyle&quot;: &quot;light&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="小程序组件"><a href="#小程序组件" class="headerlink" title="小程序组件"></a>小程序组件</h2><h4 id="小程序For-循环"><a href="#小程序For-循环" class="headerlink" title="小程序For 循环"></a>小程序For 循环</h4><p>wx:for = “变量”  小程序循环 item为微信封装的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;view wx:for&#x3D;&quot;&#123;&#123;students&#125;&#125;&quot;&gt;&#123;&#123;item.name&#125;&#125;-&#123;&#123;item.age&#125;&#125; &lt;&#x2F;view&gt;</span></pre></td></tr></table></figure><h4 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.wxml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;button size&#x3D;&quot;mini&quot; open-type&#x3D;&quot;getUserInfo&quot; bindgetuserinfo&#x3D;&quot;handleGetUserInfo&quot; &gt;获取&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">.js</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  handleGetUserInfo(event)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    console.log(event)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr></table></figure><h4 id="open-data-组件"><a href="#open-data-组件" class="headerlink" title="open-data 组件"></a>open-data 组件</h4><p>type 的合法值</p><table><thead><tr><th>值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>groupName</td><td>拉取群名称</td><td>1.4.0</td></tr><tr><td>userNickName</td><td>用户昵称</td><td>1.9.90</td></tr><tr><td>userAvatarUrl</td><td>用户头像</td><td>1.9.90</td></tr><tr><td>userGender</td><td>用户性别</td><td>1.9.90</td></tr><tr><td>userCity</td><td>用户所在城市</td><td>1.9.90</td></tr><tr><td>userProvince</td><td>用户所在省份</td><td>1.9.90</td></tr><tr><td>userCountry</td><td>用户所在国家</td><td>1.9.90</td></tr><tr><td>userLanguage</td><td>用户的语言</td><td>1.9.90</td></tr></tbody></table><h4 id="wxss-尺寸单位"><a href="#wxss-尺寸单位" class="headerlink" title="wxss 尺寸单位"></a>wxss 尺寸单位</h4><p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。<br>如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。<br>Phone5    1rpx = 0.42px    1px = 2.34rpx<br>iPhone6    1rpx = 0.5px    1px = 2rpx<br>iPhone6 Plus    1rpx = 0.552px    1px = 1.81rpx</p><h4 id="wxss-导入样式"><a href="#wxss-导入样式" class="headerlink" title="wxss 导入样式"></a>wxss 导入样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@import &#39;路径&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">@import &#39;app.wxss&#39;;</span></pre></td></tr></table></figure><h4 id="时间运用"><a href="#时间运用" class="headerlink" title="时间运用"></a>时间运用</h4><p>.wxml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;nowTime&#125;&#125;&lt;&#x2F;view&gt;</span></pre></td></tr></table></figure><p>.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">data: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  nowTime: new Date().toLocaleString()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  setInterval(() &#x3D;&gt;&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    this.setData(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      nowTime: new Date().toLocaleString()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#125;,1000)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure><h4 id="内容隐藏"><a href="#内容隐藏" class="headerlink" title="内容隐藏"></a>内容隐藏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;view wx:if&#x3D;&quot;&#123;&#123;false&#125;&#125;&quot;&gt;哈哈哈&lt;&#x2F;view&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hidden 隐藏的组件时存在的 相当与display : no</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;view hidden&#x3D;&#39;&#123;&#123;true&#125;&#125;&#39;&gt;呵呵&lt;&#x2F;view&gt;</span></pre></td></tr></table></figure><h4 id="带变量的模板"><a href="#带变量的模板" class="headerlink" title="带变量的模板"></a>带变量的模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;template name&#x3D;&quot;模板名&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  &lt;button size&#x3D;&quot;mini&quot;&gt;&#123;&#123;btntext&#125;&#125;&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;template is&#x3D;&quot;模板名&quot; data&#x3D;&quot;&#123;&#123;btntext: &#39;按钮&#39;&#125;&#125;&quot;&gt;&lt;&#x2F;template&gt;</span></pre></td></tr></table></figure><p>可通过模板路径导入(import 不可逐级导入)<br>绝对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;import  src&#x3D;&quot;&#x2F;templates&#x2F;button.wxml&quot;&#x2F;&gt;</span></pre></td></tr></table></figure><p>相对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;import  src&#x3D;&quot;..&#x2F;..&#x2F;templates&#x2F;button.wxml&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;include &#x2F;&gt; (也可以导入 相当与拷贝.wxml文件) (可逐级循环导入 类似时 父文件 导入 --&gt; 子文件 也可以导入 --&gt; 子文件)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;include src&#x3D;&quot;&#x2F;templates&#x2F;button.wxml&quot; &#x2F;&gt;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;小程序简介&quot;&gt;&lt;a href=&quot;#小程序简介&quot; class=&quot;headerlink&quot; title=&quot;小程序简介&quot;&gt;&lt;/a&gt;小程序简介&lt;/h2&gt;&lt;p&gt;小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验。&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python模块运用</title>
    <link href="http://yoursite.com/2020/01/09/Python%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/01/09/Python%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-01-09T01:36:14.000Z</published>
    <updated>2020-01-10T00:29:54.399Z</updated>
    
    <content type="html"><![CDATA[<p>模块，用一砣代码实现了某个功能的代码集合，模块是一系列常用功能的集合体，一个py文件就是一个模块。</p><p>类似于函数式编程和面向过程编程，函数式编程则完成一个功能，其他代码用来调用即可，提供了代码的重用性和代码间的耦合。而对于一个复杂的功能来，可能需要多个函数才能完成（函数又可以在不同的.py文件中），n个 .py 文件组成的代码集合就称为模块。</p><p>如：os 是系统相关的模块；file是文件操作相关的模块</p><p>模块分为三种：</p><ul><li>自定义模块(我们自己写的)</li><li>内置模块(python解释器自带)</li><li>开源模块(别人写的)</li></ul><h3 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h3><p>当程序比较庞大的时候,你的项目不可能只在一个py中那么当多个文件中都需要使用相同的方法的时候 可以将该公共的方法写到一个py文件中其他的文件以模块的形式导过去直接调用即可。</p><h3 id="开源模块"><a href="#开源模块" class="headerlink" title="开源模块"></a>开源模块</h3><h4 id="一、下载安装"><a href="#一、下载安装" class="headerlink" title="一、下载安装"></a>一、下载安装</h4><p>下载安装有两种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">方式1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">yum </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">pip</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">apt-get</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">方式2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">下载源码</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">解压源码</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">进入目录</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">编译源码    python setup.py build</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">安装源码    python setup.py install</span></pre></td></tr></table></figure><p>注：在使用源码安装时，需要使用到gcc编译和python开发环境，所以，需要先执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">yum install gcc</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">yum install python-devel</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">或</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">apt-get python-dev</span></pre></td></tr></table></figure><p>安装成功后，模块会自动安装到 sys.path 中的某个目录中，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">1:&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;</span></pre></td></tr></table></figure><h4 id="二、导入模块"><a href="#二、导入模块" class="headerlink" title="二、导入模块"></a>二、导入模块</h4><p>模块 paramiko</p><p>paramiko是一个用于做远程控制的模块，使用该模块可以对远程服务器进行命令或文件操作，值得一说的是，fabric和ansible内部的远程管理就是使用的paramiko来现实。</p><p>1、下载安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">pip3 install paramiko</span></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># pycrypto，由于 paramiko 模块内部依赖pycrypto，所以先下载安装pycrypto</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"># 下载安装 pycrypto</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;files.cnblogs.com&#x2F;files&#x2F;wupeiqi&#x2F;pycrypto-2.6.1.tar.gz</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">tar -xvf pycrypto-2.6.1.tar.gz</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">cd pycrypto-2.6.1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">python setup.py build</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">python setup.py install</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"># 进入python环境，导入Crypto检查是否安装成功</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"># 下载安装 paramiko</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;files.cnblogs.com&#x2F;files&#x2F;wupeiqi&#x2F;paramiko-1.10.1.tar.gz</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">tar -xvf paramiko-1.10.1.tar.gz</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">cd paramiko-1.10.1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">python setup.py build</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">python setup.py install</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"># 进入python环境，导入paramiko检查是否安装成功</span></pre></td></tr></table></figure><p>2、paramiko模块的使用</p><p> 执行命令 - 通过用户名和密码连接服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">import paramiko</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">ssh &#x3D; paramiko.SSHClient()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">ssh.connect(&#39;192.168.1.108&#39;, 22, &#39;alex&#39;, &#39;123&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">stdin, stdout, stderr &#x3D; ssh.exec_command(&#39;df&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">print stdout.read()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">ssh.close();</span></pre></td></tr></table></figure><p> 执行命令 - 过密钥链接服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import paramiko</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">private_key_path &#x3D; &#39;&#x2F;home&#x2F;auto&#x2F;.ssh&#x2F;id_rsa&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">key &#x3D; paramiko.RSAKey.from_private_key_file(private_key_path)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">ssh &#x3D; paramiko.SSHClient()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">ssh.connect(&#39;主机名 &#39;, 端口, &#39;用户名&#39;, key)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">stdin, stdout, stderr &#x3D; ssh.exec_command(&#39;df&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">print stdout.read()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">ssh.close()</span></pre></td></tr></table></figure><p> 上传或下载文件 - 通过密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import paramiko</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">pravie_key_path &#x3D; &#39;&#x2F;home&#x2F;auto&#x2F;.ssh&#x2F;id_rsa&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">key &#x3D; paramiko.RSAKey.from_private_key_file(pravie_key_path)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">t &#x3D; paramiko.Transport((&#39;182.92.219.86&#39;,22))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">t.connect(username&#x3D;&#39;wupeiqi&#39;,pkey&#x3D;key)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">sftp &#x3D; paramiko.SFTPClient.from_transport(t)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">sftp.put(&#39;&#x2F;tmp&#x2F;test3.py&#39;,&#39;&#x2F;tmp&#x2F;test3.py&#39;) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">t.close()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">import paramiko</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">pravie_key_path &#x3D; &#39;&#x2F;home&#x2F;auto&#x2F;.ssh&#x2F;id_rsa&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">key &#x3D; paramiko.RSAKey.from_private_key_file(pravie_key_path)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">t &#x3D; paramiko.Transport((&#39;182.92.219.86&#39;,22))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">t.connect(username&#x3D;&#39;wupeiqi&#39;,pkey&#x3D;key)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">sftp &#x3D; paramiko.SFTPClient.from_transport(t)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">sftp.get(&#39;&#x2F;tmp&#x2F;test3.py&#39;,&#39;&#x2F;tmp&#x2F;test4.py&#39;) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">t.close()</span></pre></td></tr></table></figure><h3 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h3><h4 id="一、os"><a href="#一、os" class="headerlink" title="一、os"></a>一、os</h4><p>用于提供系统级别的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">os.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">os.chdir(&quot;dirname&quot;)  改变当前脚本工作目录；相当于shell下cd</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">os.curdir  返回当前目录: (&#39;.&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">os.pardir  获取当前目录的父目录字符串名：(&#39;..&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">os.makedirs(&#39;dirname1&#x2F;dirname2&#39;)    可生成多层递归目录</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">os.removedirs(&#39;dirname1&#39;)    若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">os.mkdir(&#39;dirname&#39;)    生成单级目录；相当于shell中mkdir dirname</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">os.rmdir(&#39;dirname&#39;)    删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">os.listdir(&#39;dirname&#39;)    列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">os.remove()  删除一个文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">os.rename(&quot;oldname&quot;,&quot;newname&quot;)  重命名文件&#x2F;目录</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">os.stat(&#39;path&#x2F;filename&#39;)  获取文件&#x2F;目录信息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">os.sep    输出操作系统特定的路径分隔符，win下为&quot;\\&quot;,Linux下为&quot;&#x2F;&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">os.linesep    输出当前平台使用的行终止符，win下为&quot;\t\n&quot;,Linux下为&quot;\n&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">os.pathsep    输出用于分割文件路径的字符串</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">os.name    输出字符串指示当前使用平台。win-&gt;&#39;nt&#39;; Linux-&gt;&#39;posix&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">os.system(&quot;bash command&quot;)  运行shell命令，直接显示</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">os.environ  获取系统环境变量</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">os.path.abspath(path)  返回path规范化的绝对路径</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">os.path.split(path)  将path分割成目录和文件名二元组返回</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">os.path.dirname(path)  返回path的目录。其实就是os.path.split(path)的第一个元素</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">os.path.basename(path)  返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">os.path.exists(path)  如果path存在，返回True；如果path不存在，返回False</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">os.path.isabs(path)  如果path是绝对路径，返回True</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">os.path.isfile(path)  如果path是一个存在的文件，返回True。否则返回False</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">os.path.isdir(path)  如果path是一个存在的目录，则返回True。否则返回False</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">os.path.join(path1[, path2[, ...]])  将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">os.path.getatime(path)  返回path所指向的文件或者目录的最后存取时间</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">os.path.getmtime(path)  返回path所指向的文件或者目录的最后修改时间</span></pre></td></tr></table></figure><h4 id="二、sys"><a href="#二、sys" class="headerlink" title="二、sys"></a>二、sys</h4><p>用于提供对解释器相关的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ys.argv           命令行参数List，第一个元素是程序本身路径</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sys.exit(n)        退出程序，正常退出时exit(0)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">sys.version        获取Python解释程序的版本信息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">sys.maxint         最大的Int值</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">sys.platform       返回操作系统平台名称</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">sys.stdout.write(&#39;please:&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">val &#x3D; sys.stdin.readline()[:-1]</span></pre></td></tr></table></figure><h4 id="三、json-和-pickle"><a href="#三、json-和-pickle" class="headerlink" title="三、json 和 pickle"></a>三、json 和 pickle</h4><p>用于序列化的两个模块</p><p>json，用于字符串 和 python数据类型间进行转换<br>pickle，用于python特有的类型 和 python的数据类型间进行转换</p><p>Json模块提供了四个功能：dumps、dump、loads、load</p><p>pickle模块提供了四个功能：dumps、dump、loads、load</p><h4 id="四、-ConfigParser"><a href="#四、-ConfigParser" class="headerlink" title="四、 ConfigParser"></a>四、 ConfigParser</h4><p>configparser模块主要用于读取配置文件，导入方法：import configparser</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"> 1 #!&#x2F;usr&#x2F;bin&#x2F;env python</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> 2 # -*- coding:utf-8 -*-</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> 3 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> 4 import configparser</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> 5 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> 6 con &#x3D; configparser.ConfigParser()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"> 7 #con对象的read功能，打开文件读取文件，放进内存</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"> 8 con.read(&quot;default.txt&quot;, encoding&#x3D;&#39;utf-8&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"> 9 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">10 #1、con对象的sections，内存中所有的节点</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">11 result &#x3D; con.sections()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">12 print(&quot;所有的节点:&quot;, result)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">13 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">14 #2、获取指定节点下的所有键值对</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">15 con_items &#x3D; con.items(&quot;first&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">16 print(&#39;first下所有的键值对：&#39;, con_items)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">17 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">18 #3、获取指定节点下的所有键</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">19 ret &#x3D; con.options(&quot;second&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">20 print(&#39;second下的所有键：&#39;, ret)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">21 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">22 #4、获取指定节点下指定的key的值</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">23 v &#x3D; con.get(&quot;second&quot;, &#39;age&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">24 print(&#39;second节点下age的值：&#39;, v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">25 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">26 #5、检查、删除、添加节点</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">27 #5.1检查是否存在指定的节点，返回True为存在，False为不存在</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">28 has_con &#x3D; con.has_section(&quot;first&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">29 print(&#39;是否已存在first节点：&#39;, has_con)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">30 #5.2添加节点</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">31 con.add_section(&quot;SEC-1&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">32 #con.write(open(&#39;default.txt&#39;, &#39;w&#39;))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">33 #5.3删除节点</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">34 con.remove_section(&quot;SEC-1&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">35 #con.write(open(&#39;default.txt&#39;, &#39;w&#39;))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">36 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">37 #6、检查、删除、设置指定组内的键值对</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">38 #6.1检查</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">39 has_opt &#x3D; con.has_option(&#39;second&#39;, &#39;age&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">40 print(has_opt)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">41 #6.2删除</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">42 con.remove_option(&#39;second&#39;, &#39;age&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">43 #6.3设置</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">44 con.set(&#39;second&#39;, &#39;name&#39;, &quot;june_liang&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">45 #对configparser对象执行的一些修改操作，必须重新写回到文件才可生效</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">46 con.write(open(&#39;default.txt&#39;, &#39;w&#39;))</span></pre></td></tr></table></figure><h4 id="五、logging"><a href="#五、logging" class="headerlink" title="五、logging"></a>五、logging</h4><p>日志是一种可以追踪某些软件运行时所发生事件的方法。软件开发人员可以向他们的代码中调用日志记录相关的方法来表明发生了某些事情。一个事件可以用一个可包含可选变量数据的消息来描述。此外，事件也有重要性的概念，这个重要性也可以被称为严重性级别（level）。</p><h5 id="日志的等级"><a href="#日志的等级" class="headerlink" title="日志的等级"></a>日志的等级</h5><p>我们先来思考下下面的两个问题：</p><p>作为开发人员，在开发一个应用程序时需要什么日志信息？在应用程序正式上线后需要什么日志信息？<br>作为应用运维人员，在部署开发环境时需要什么日志信息？在部署生产环境时需要什么日志信息？<br>在软件开发阶段或部署开发环境时，为了尽可能详细的查看应用程序的运行状态来保证上线后的稳定性，我们可能需要把该应用程序所有的运行日志全部记录下来进行分析，这是非常耗费机器性能的。当应用程序正式发布或在生产环境部署应用程序时，我们通常只需要记录应用程序的异常信息、错误信息等，这样既可以减小服务器的I/O压力，也可以避免我们在排查故障时被淹没在日志的海洋里。那么，怎样才能在不改动应用程序代码的情况下实现在不同的环境记录不同详细程度的日志呢？这就是日志等级的作用了，我们通过配置文件指定我们需要的日志等级就可以了。</p><p>不同的应用程序所定义的日志等级可能会有所差别，分的详细点的会包含以下几个等级：</p><ul><li>DEBUG</li><li>INFO</li><li>NOTICE</li><li>WARNING</li><li>ERROR</li><li>CRITICAL</li><li>ALERT</li><li>EMERGENCY</li></ul><h5 id="日志字段信息与日志格式"><a href="#日志字段信息与日志格式" class="headerlink" title="日志字段信息与日志格式"></a>日志字段信息与日志格式</h5><ul><li>事件发生时间</li><li>事件发生位置</li><li>事件的严重程度–日志级别</li><li>事件内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import logging,time,os,sys</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#路径加载</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">pro_path&#x3D; os.path.dirname(os.getcwd())  #加载上一层目录</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">sys.path.append(pro_path)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">log_path &#x3D; os.path.join(pro_path,&quot;log&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">#日志函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">def get_log():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    log_file&#x3D; log_path</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    m_date &#x3D; time.strftime(&#39;%Y%m%d&#39;, time.localtime(time.time()))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    if not os.path.isdir(log_file):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        os.mkdir(log_file)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    logfile_path&#x3D;os.path.join(log_file,m_date+&#39;.log&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">#创建日志对象</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    logger&#x3D;logging.getLogger()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">#设置日志等级</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    logger.setLevel(&quot;DEBUG&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">#创建文件输出</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    log&#x3D;logging.FileHandler(logfile_path)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">#日志格式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    log_format&#x3D;logging.Formatter(&quot;%(asctime)s %(levelname)s : %(message)s&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">#为文件绑定日志格式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    log.setFormatter(log_format)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    logger.addHandler(log)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    return  logger</span></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;模块，用一砣代码实现了某个功能的代码集合，模块是一系列常用功能的集合体，一个py文件就是一个模块。&lt;/p&gt;
&lt;p&gt;类似于函数式编程和面向过程编程，函数式编程则完成一个功能，其他代码用来调用即可，提供了代码的重用性和代码间的耦合。而对于一个复杂的功能来，可能需要多个函数才能完
      
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>github博客搭建</title>
    <link href="http://yoursite.com/2019/11/29/github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/11/29/github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2019-11-29T01:36:14.000Z</published>
    <updated>2020-01-09T01:20:36.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在本地搭建Hexo博客"><a href="#在本地搭建Hexo博客" class="headerlink" title="在本地搭建Hexo博客"></a>在本地搭建Hexo博客</h2><h4 id="为什么选择Hexo"><a href="#为什么选择Hexo" class="headerlink" title="为什么选择Hexo"></a>为什么选择Hexo</h4><ul><li>使用Markdown语法写博客，可免去把文本转换成HTML的痛苦，因此对Markdown支持得好，是下面一切选择的前提。支持Markdown的博客工具之中，比较入眼的有ghost, Jekyll和hexo。</li></ul><p>hexo获得的关注虽不如前两者，但它有几点很讨人喜欢：</p><ul><li>依赖少（仅依赖node），易于安装</li><li>台湾人写的，不用担心对中文支持不好</li><li>对程序员友好，要是愿意折腾还是有的折腾的<br>基于以上原因，我最终选择了hexo作为维护博客的工具</li></ul><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>最新版的nodejs可以在<a href="https://nodejs.org/en/" target="_blank" rel="noopener">这里获取</a>，下载后直接安装即可，安装完后打开cmd，输入npm -v，如果能输出版本号则说明安装成功。</p><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>git的安装和配置请自行百度，这里就不详细写了，这是git的<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载地址</a></p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>如果已经完成了以上两步，在一个私人文件夹下打开cmd，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hexo init blog</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cd blog</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">npm install</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">hexo server</span></pre></td></tr></table></figure><p>如果一切正常，在浏览器中访问本地服务器就可以看到运行在本地的博客了。</p><h4 id="将博客部署到Github上"><a href="#将博客部署到Github上" class="headerlink" title="将博客部署到Github上"></a>将博客部署到Github上</h4><p>添加ssh-key<br>在gitlab完成注册后，首先访问这里，向你的帐户添加ssh keys，ssh keys的生成可以参考如下的步骤，打开2.2安装的Git Bash，输入如下命令(自行替换其中的用户名和邮箱信息)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;lxqxsyu&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;lxq_xsyu@163.com&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;lxq_xsyu@163.com&quot;</span></pre></td></tr></table></figure><p>最终生成的文件一般位于C:\Users\UserName.ssh文件夹下，打开id_rsa.pub，将里面的所有内容添加到<a href="https://gitlab.com/users/sign_in" target="_blank" rel="noopener">这里</a>。</p><p>部署到 Github<br>此时，本地和Github的工作做得差不了，是时候把它们两个连接起来了。你也可以查看官网的部署教程。<br>先不着急，部署之前还需要修改配置和安装部署插件。<br>第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：</p><ul><li>1 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">deploy:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  type: git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  repository: http:&#x2F;&#x2F;github.com&#x2F;yangql881012&#x2F;yangql881012.github.io.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  branch: master</span></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;lxqxsyu&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;lxq_xsyu@163.com&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git d</span></pre></td></tr></table></figure></li><li>2<br>修改站点配置文件&amp;更换主题<br>这里推荐大家使用NexT主题，这也是本站目前使用的主题，具体的安装步骤可以参考这里，有一点需要注意的是，将themes\next\目录下的.git文件夹删除。</li></ul><p>下面主要还需要对项目根目录下的_config.yml进行修改</p><p>接下来，在项目根目录下运行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git init</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitlab.com:lxqxsyu&#x2F;lxqxsyu.gitlab.io.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git add .</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git commit -m &quot;init blog&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">git push -u origin master</span></pre></td></tr></table></figure><p>以上第二句命令请根据自己的项目名称进行调整。</p><p>完成推送后，访问你的项目主页，如果看到passed的图标，就表示构建成功了，访问<u><a href="https://Alaciebat.gitlab.io/" target="_blank" rel="noopener">https://Alaciebat.gitlab.io/</a></u> 就可以看到自己刚刚建立的博客了。</p><p>如果需要添加新的文章，将文章的md文件保存到source_posts文件夹下然后重新执行推送就可以了，服务器端完成构建后，如果没有错误就会出现在你的博客页面上。</p><p>到此何如在gitlab上搭建一个博客就说完了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在本地搭建Hexo博客&quot;&gt;&lt;a href=&quot;#在本地搭建Hexo博客&quot; class=&quot;headerlink&quot; title=&quot;在本地搭建Hexo博客&quot;&gt;&lt;/a&gt;在本地搭建Hexo博客&lt;/h2&gt;&lt;h4 id=&quot;为什么选择Hexo&quot;&gt;&lt;a href=&quot;#为什么选择Hex
      
    
    </summary>
    
    
    
      <category term="软件" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
</feed>
